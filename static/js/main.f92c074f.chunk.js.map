{"version":3,"sources":["components/header/index.js","components/header/header.js","components/button/index.js","components/button/button.js","components/buttons-belt/index.js","components/buttons-belt/buttons-belt.js","components/stopwatch/index.js","components/stopwatch/stopwatch.js","utils.js","components/lifecycle-page/index.js","components/lifecycle-page/lifecycle-page.js","App.js","index.js"],"names":["Header","title","className","MyButton","onSubmit","props","this","icon","onClick","Component","ButtonsBelt","alignment","children","Stopwatch","tick","setState","state","date","moment","add","stopStopwatch","cleanTimer","isActive","startStopwatch","continueTimer","cleanStopwatch","id","setInterval","timerId","restartStopwatch","clearInterval","nextProps","nextState","nextTimerId","nextDate","get","stopwatchDidMount","prevProps","prevState","console","log","stopwatchDidUpdate","stopwatchWillUnmount","controlBtn","restartBtn","format","getColor","elementName","LifecyclePage","events","onClearEvents","eventsList","map","element","elementBackground","name","key","number","timestamp","undefined","App","onAddEvent","eventName","count","stopwatchIsVisible","stopwatch","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f92c074f.chunk.js","sourcesContent":["import Header from \"./header\";\n\nexport default Header;","import React from \"react\";\n\nconst Header = ({title}) => {\n    return (\n        <div>\n            <h1 className=\"header center\">\n                {title}\n            </h1>\n        </div>\n    )\n}\n\nexport default Header","import MyButton from \"./button\";\n\nexport default MyButton","import React, {Component} from \"react\";\n\nexport default class MyButton extends Component {\n\n    onSubmit = () => {\n        const {onSubmit, title} = this.props;\n        onSubmit(title);\n    }\n\n    render() {\n        const {title, icon} = this.props;\n\n        return (\n            // eslint-disable-next-line jsx-a11y/anchor-is-valid\n            <a className=\"waves-effect waves-light btn-small\"\n               onClick={this.onSubmit}>\n                <i className=\"material-icons left\">\n                    {icon}\n                </i>\n                {title}\n            </a>\n        )\n    }\n}","import ButtonsBelt from \"./buttons-belt\";\n\nexport default ButtonsBelt;","import React from \"react\";\n\nconst ButtonsBelt = ({alignment = \"center\", children}) => {\n\n    return (\n        <div className={`row ${alignment}`}>\n            {children}\n        </div>\n    )\n}\n\nexport default ButtonsBelt;","import Stopwatch from \"./stopwatch\";\n\nexport default Stopwatch;\n\n","import React, {Component} from \"react\";\nimport moment from \"moment\";\nimport MyButton from \"../button\";\nimport ButtonsBelt from \"../buttons-belt\";\n\nexport default class Stopwatch extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isActive: true,\n            timerId: -1,\n            date: moment(\"2020-06-06 00:00:00\"),\n        };\n    }\n\n    tick = () => {\n        this.setState(state => {\n            const newDate = moment(state.date).add(1, 'seconds');\n            return {\n                date: newDate,\n            };\n        });\n    }\n\n\n    stopStopwatch = () => {\n        this.cleanTimer();\n        this.setState({\n            isActive: false,\n        });\n    }\n\n    startStopwatch = (continueTimer = false) => {\n        if (!continueTimer) {\n            this.cleanStopwatch();\n            this.cleanTimer();\n        }\n        const id = setInterval(this.tick, 1000);\n        this.setState({\n            isActive: true,\n            timerId: id,\n        });\n    }\n\n    restartStopwatch = () => {\n        this.cleanTimer();\n        this.cleanStopwatch();\n        this.startStopwatch();\n    }\n\n\n    cleanTimer = () => {\n        const {timerId} = this.state;\n        clearInterval(timerId);\n        this.setState({\n            timerId: -1,\n        })\n    }\n\n    cleanStopwatch = () => {\n        this.setState({\n            date: moment(\"2020-06-06 00:00:00\"),\n        });\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        const {timerId, date} = this.state;\n        const {timerId: nextTimerId, date: nextDate} = nextState;\n\n        return !(timerId === nextTimerId && date.get('second') === nextDate.get('second'));\n    }\n\n    componentDidMount() {\n        const {stopwatchDidMount} = this.props;\n\n        this.startStopwatch();\n        stopwatchDidMount();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        console.log(\"componentDidUpdate\");\n        const {stopwatchDidUpdate} = this.props;\n        stopwatchDidUpdate();\n    }\n\n    componentWillUnmount() {\n        this.cleanTimer();\n        const {stopwatchWillUnmount} = this.props;\n        stopwatchWillUnmount();\n    }\n\n    render() {\n        const {date, isActive} = this.state;\n\n        const controlBtn = <MyButton title={isActive ? \"Stop\" : \"Start\"}\n                                     icon={isActive ? \"stop\" : \"play_arrow\"}\n                                     onSubmit={() => {\n                                         isActive\n                                             ? this.stopStopwatch()\n                                             : this.startStopwatch(true)\n                                     }}/>;\n\n        const restartBtn = <MyButton title=\"Restart\"\n                                     icon=\"repeat\"\n                                     onSubmit={this.restartStopwatch}/>\n\n        return (\n            <div className=\"row\">\n                <div className=\"col s12\">\n                    <span className=\"center\">\n                        <h2>{date.format(\"mm:ss\")}</h2>\n                    </span>\n                </div>\n                <div className=\"col s12\">\n                    <ButtonsBelt>\n                        {controlBtn}\n                        {restartBtn}\n                    </ButtonsBelt>\n                </div>\n            </div>\n        )\n    }\n}","function getColor(elementName) {\n    if (elementName === 'stopwatchWillUnmount') {\n        return 'red lighten-1'\n    }\n\n    if (elementName === 'stopwatchDidUpdate') {\n        return 'deep-purple lighten-2'\n    }\n\n    if (elementName === 'stopwatchDidMount') {\n        return 'blue lighten-3'\n    }\n}\n\nexport default getColor;","import LifecyclePage from \"./lifecycle-page\";\n\nexport default LifecyclePage;\n","import React from \"react\";\nimport MyButton from \"../button\";\nimport getColor from \"../../utils\";\n\n// export default class LifecyclePage extends Component {\n//\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             events: props.events,\n//         }\n//     }\n//\n//     clearEvents = () => {\n//         this.props.onClearEvents();\n//     }\n//\n//     render() {\n//         const {events} = this.state;\n//\n//         const eventsList = events.map((element, idx) => {\n//             return (\n//                 <li key={element}\n//                     className=\"collection-item\">\n//                     {`${idx}. ${element}`}\n//                 </li>);\n//         })\n//\n//         return (\n//             <div>\n//                 <div className=\"row center\">\n//                     <div className=\"col s4 offset-s4\">\n//                         <ul className=\"collection\">\n//                             {eventsList}\n//                         </ul>\n//                     </div>\n//                 </div>\n//\n//                 <div className=\"row center\">\n//                     <MyButton title=\"Clear\"\n//                               icon={undefined}\n//                               onSubmit={this.clearEvents}/>\n//                 </div>\n//             </div>\n//         );\n//     }\n// }\n\nconst LifecyclePage = ({events, onClearEvents}) => {\n\n    const clearEvents = () => {\n        onClearEvents();\n    }\n\n    const eventsList = events.map(element => {\n        const elementBackground = getColor(element.name);\n\n        return (\n            <li key={element.number}\n                className={`collection-item ${elementBackground}`}>\n                {`${element.number}. ${element.name}   `}\n                <b>{`${element.timestamp}`}</b>\n            </li>);\n    })\n\n    return (\n        <div>\n            <div className=\"row center\">\n                <MyButton title=\"Clear lifecycle list\"\n                          icon={undefined}\n                          onSubmit={clearEvents}/>\n            </div>\n            <div className=\"row center\">\n                <div className=\"col s4 offset-s4\">\n                    <ul className=\"collection\">\n                        {eventsList}\n                    </ul>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default LifecyclePage;","import React, {Component} from 'react';\nimport Header from \"./components/header\";\nimport Stopwatch from \"./components/stopwatch\";\nimport ButtonsBelt from \"./components/buttons-belt\";\nimport MyButton from \"./components/button\";\nimport LifecyclePage from \"./components/lifecycle-page\";\nimport moment from \"moment\";\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            stopwatchIsVisible: true,\n            events: [],\n            count: 0,\n        };\n    }\n\n    onAddEvent = (eventName) => {\n        this.setState(({events, count}) => {\n            return {\n                events:\n                    [\n                        {\n                            number: count + 1,\n                            name: eventName,\n                            timestamp: moment().format(\"HH:mm:ss:SSS\")\n                        },\n                        ...events,\n                    ],\n                count: count + 1,\n            };\n        });\n    }\n\n    onClick = () => {\n        this.setState(state => {\n            return {\n                stopwatchIsVisible: !state.stopwatchIsVisible,\n            };\n        });\n    }\n\n    onClearEvents = () => {\n        this.setState({\n            events: [],\n            count: 0,\n        });\n    }\n\n    stopwatchDidMount = () => {\n        this.onAddEvent(\"stopwatchDidMount\");\n    }\n\n    stopwatchDidUpdate = () => {\n        this.onAddEvent(\"stopwatchDidUpdate\");\n    }\n\n    stopwatchWillUnmount = () => {\n        this.onAddEvent(\"stopwatchWillUnmount\");\n    }\n\n\n    render() {\n        const {stopwatchIsVisible, events} = this.state;\n\n        const controlBtn = <MyButton title={stopwatchIsVisible ? \"Hide\" : \"Show\"}\n                                     icon={stopwatchIsVisible ? null : \"remove_red_eye\"}\n                                     onSubmit={this.onClick}/>;\n\n        const stopwatch = stopwatchIsVisible\n            ? <Stopwatch stopwatchDidMount={this.stopwatchDidMount}\n                         stopwatchDidUpdate={this.stopwatchDidUpdate}\n                         stopwatchWillUnmount={this.stopwatchWillUnmount}/>\n            : null;\n\n        return (\n            <div className=\"container\">\n                <Header title=\"Stopwatch\"/>\n                {stopwatch}\n                <ButtonsBelt>\n                    {controlBtn}\n                </ButtonsBelt>\n                <LifecyclePage events={events}\n                               onClearEvents={this.onClearEvents}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}